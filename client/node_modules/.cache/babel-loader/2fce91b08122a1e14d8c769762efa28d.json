{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Tasks.js\";\nimport './Tasks.css';\nimport Task from './Task';\nimport DropDown from './DropDown';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function (_ref) {\n  let {\n    taskListId,\n    taskListTitle\n  } = _ref;\n  const [tasksState, setTasksState] = useState([]);\n  const [showCompleted, setShowCompleted] = useState(true);\n  const [selectedTask, setSelectedTask] = useState(null);\n\n  const sortByStatus = tasks => {\n    const tempNorm = [];\n    const tempStatus = [];\n\n    for (let i = 0; i < tasks.length; i++) {\n      let task = tasks[i];\n\n      if (task.status == 'Complete') {\n        tempStatus.push(task);\n      } else {\n        tempNorm.push(task);\n      }\n    }\n\n    return setTasksState([...tempNorm, ...tempStatus]);\n  };\n\n  const createTask = async title => {\n    const res = await fetch(`/api/task/${taskListId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        title\n      })\n    });\n\n    if (res.ok) {\n      const {\n        task\n      } = await res.json();\n      sortByStatus([...tasksState, task]);\n    } else {}\n  };\n\n  const toggleCompleted = e => {\n    setShowCompleted(!showCompleted);\n  };\n\n  const updateCompletedClass = () => {};\n\n  useEffect(() => {\n    if (!taskListId) {\n      setTasksState([]);\n      return;\n    }\n\n    async function fetchData() {\n      const res = await fetch(`/api/tasks/${taskListId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (res.ok) {\n        const {\n          tasks\n        } = await res.json();\n        tasks ? sortByStatus([...tasks]) : sortByStatus([]);\n      }\n    }\n\n    fetchData();\n  }, [taskListId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main__tasks tasks\",\n    onClick: () => sortByStatus(tasksState),\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"tasks__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasks__list__title\",\n        children: taskListTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), taskListId && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle__completed\",\n          htmlFor: \"showCompleted\",\n          children: \"Hide Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"showCompleted\",\n          checked: !showCompleted,\n          value: \"Toggle Completed\",\n          onClick: e => toggleCompleted(e),\n          onChange: updateCompletedClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n          handleCreate: createTask,\n          buttonLabel: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), tasksState.map((task, idx) => (showCompleted || task.status !== 'Complete') && /*#__PURE__*/_jsxDEV(Task, {\n      task: task,\n      status: task.status,\n      setTasksState: setTasksState,\n      tasksState: tasksState,\n      idx: idx,\n      selectedTask: selectedTask,\n      setSelectedTask: setSelectedTask\n    }, String(task.id) + String(task.title) + String(task.updateDate), false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 60\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"names":["Task","DropDown","React","useEffect","useState","taskListId","taskListTitle","tasksState","setTasksState","showCompleted","setShowCompleted","selectedTask","setSelectedTask","sortByStatus","tasks","tempNorm","tempStatus","i","length","task","status","push","createTask","title","res","fetch","method","headers","body","JSON","stringify","ok","json","toggleCompleted","e","updateCompletedClass","fetchData","map","idx","String","id","updateDate"],"sources":["/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Tasks.js"],"sourcesContent":["import './Tasks.css';\nimport Task from './Task';\nimport DropDown from './DropDown';\nimport React, { useEffect, useState } from 'react';\n\nexport default function ({ taskListId, taskListTitle }) {\n  const [tasksState, setTasksState] = useState([]);\n  const [showCompleted, setShowCompleted] = useState(true);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const sortByStatus = (tasks) => {\n    const tempNorm = [];\n    const tempStatus = [];\n    for (let i = 0; i < tasks.length; i++) {\n      let task = tasks[i];\n      if (task.status == 'Complete') {\n        tempStatus.push(task);\n      } else {\n        tempNorm.push(task);\n      }\n    }\n    return setTasksState([...tempNorm, ...tempStatus]);\n  }\n\n  const createTask = async (title) => {\n    const res = await fetch(`/api/task/${taskListId}`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        title\n      })\n    })\n    if (res.ok) {\n      const { task } = await res.json();\n      sortByStatus([...tasksState, task]);\n    } else {\n    }\n  }\n\n  const toggleCompleted = (e) => {\n    setShowCompleted(!showCompleted);\n  }\n\n  const updateCompletedClass = () => {\n\n  }\n\n  useEffect(() => {\n    if (!taskListId) {\n      setTasksState([]);\n      return;\n    }\n    async function fetchData() {\n      const res = await fetch(`/api/tasks/${taskListId}`, {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n      if (res.ok) {\n        const { tasks } = await res.json();\n        tasks ? sortByStatus([...tasks]) : sortByStatus([]);\n      }\n    }\n    fetchData();\n  }, [taskListId]);\n\n\n\n  return (\n    <div className=\"main__tasks tasks\"\n      onClick={() => sortByStatus(tasksState)}\n    >\n      <h3 className=\"tasks__header\">\n        <div className='tasks__list__title'>\n          {taskListTitle}\n        </div>\n        {taskListId &&\n          <>\n            <label className='toggle__completed' htmlFor='showCompleted'>Hide Completed</label>\n            <input\n              type='checkbox'\n              name='showCompleted'\n              checked={!showCompleted}\n              value='Toggle Completed'\n              onClick={(e) => toggleCompleted(e)}\n              onChange={updateCompletedClass}\n            />\n            <DropDown handleCreate={createTask} buttonLabel=\"Add Task\" />\n          </>\n        }\n\n      </h3>\n      {\n        tasksState.map((task, idx) => (\n          (showCompleted || task.status !== 'Complete') && <Task\n            task={task}\n            status={task.status}\n            key={String(task.id) + String(task.title) + String(task.updateDate)}\n            setTasksState={setTasksState}\n            tasksState={tasksState}\n            idx={idx}\n            selectedTask={selectedTask}\n            setSelectedTask={setSelectedTask}\n          />\n        ))\n      }\n    </div >\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}