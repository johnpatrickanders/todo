{"ast":null,"code":"var _jsxFileName = \"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/ImagePicker.js\";\nimport { useState } from 'react';\nimport './ListForm.css';\nimport './ImageView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function (_ref) {\n  let {\n    task,\n    setSelectedFile,\n    selectedFile,\n    handleSubmission\n  } = _ref;\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [uploadError, setUploadError] = useState('');\n\n  const changeHandler = e => {\n    setIsFilePicked(true);\n    const file = e.target.files[0];\n\n    if (file.size > 1000000) {\n      setUploadError(\"No files > 1mb\");\n    } else if (file.type !== 'image/png' && file.type !== 'image/jpeg') {\n      setUploadError(\"PNG or JPEG only\");\n    } else {\n      setSelectedFile(file);\n    }\n  }; // NOT IN USE: use if want to upload via backend instead of presigned post url\n\n\n  const handlePut = async e => {\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    const res = await fetch(`/api/put_s3/${selectedFile.name}`, {\n      method: \"POST\",\n      headers: {\n        'Enctype': 'multipart/form-data'\n      },\n      body: formData\n    });\n\n    if (res.ok) {\n      const data = await res.json();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      style: {\n        'color': 'transparent',\n        'width': '90px'\n      },\n      onChange: changeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), isFilePicked && selectedFile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", selectedFile.name, \" \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"error\",\n      children: [\" \", uploadError, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"names":["useState","task","setSelectedFile","selectedFile","handleSubmission","isFilePicked","setIsFilePicked","uploadError","setUploadError","changeHandler","e","file","target","files","size","type","handlePut","formData","FormData","append","res","fetch","name","method","headers","body","ok","data","json"],"sources":["/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/ImagePicker.js"],"sourcesContent":["import { useState } from 'react';\nimport './ListForm.css';\nimport './ImageView.css';\n\nexport default function ({ task, setSelectedFile, selectedFile, handleSubmission }) {\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [uploadError, setUploadError] = useState('');\n\n  const changeHandler = (e) => {\n    setIsFilePicked(true);\n    const file = e.target.files[0];\n    if (file.size > 1000000) {\n      setUploadError(\"No files > 1mb\");\n    } else if (file.type !== 'image/png' && file.type !== 'image/jpeg') {\n      setUploadError(\"PNG or JPEG only\");\n    } else {\n      setSelectedFile(file);\n    }\n  };\n\n  // NOT IN USE: use if want to upload via backend instead of presigned post url\n  const handlePut = async (e) => {\n    const formData = new FormData();\n    formData.append('file', selectedFile)\n    const res = await fetch(`/api/put_s3/${selectedFile.name}`, {\n      method: \"POST\",\n      headers: {\n        'Enctype': 'multipart/form-data'\n      },\n      body: formData\n    });\n    if (res.ok) {\n      const data = await res.json();\n    }\n  }\n\n  return (\n    < >\n      <input\n        type=\"file\"\n        name=\"file\"\n        style={{\n          'color': 'transparent',\n          'width': '90px'\n        }}\n        onChange={changeHandler} />\n      {isFilePicked && selectedFile ? (\n        <> {selectedFile.name} </>\n      ) : <span className='error'> {uploadError} </span>\n      }\n    </>\n  )\n}\n"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,gBAAP;AACA,OAAO,iBAAP;;;AAEA,eAAe,gBAAqE;EAAA,IAA3D;IAAEC,IAAF;IAAQC,eAAR;IAAyBC,YAAzB;IAAuCC;EAAvC,CAA2D;EAClF,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;EACA,MAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;;EAEA,MAAMS,aAAa,GAAIC,CAAD,IAAO;IAC3BJ,eAAe,CAAC,IAAD,CAAf;IACA,MAAMK,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;;IACA,IAAIF,IAAI,CAACG,IAAL,GAAY,OAAhB,EAAyB;MACvBN,cAAc,CAAC,gBAAD,CAAd;IACD,CAFD,MAEO,IAAIG,IAAI,CAACI,IAAL,KAAc,WAAd,IAA6BJ,IAAI,CAACI,IAAL,KAAc,YAA/C,EAA6D;MAClEP,cAAc,CAAC,kBAAD,CAAd;IACD,CAFM,MAEA;MACLN,eAAe,CAACS,IAAD,CAAf;IACD;EACF,CAVD,CAJkF,CAgBlF;;;EACA,MAAMK,SAAS,GAAG,MAAON,CAAP,IAAa;IAC7B,MAAMO,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;IACAD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBhB,YAAxB;IACA,MAAMiB,GAAG,GAAG,MAAMC,KAAK,CAAE,eAAclB,YAAY,CAACmB,IAAK,EAAlC,EAAqC;MAC1DC,MAAM,EAAE,MADkD;MAE1DC,OAAO,EAAE;QACP,WAAW;MADJ,CAFiD;MAK1DC,IAAI,EAAER;IALoD,CAArC,CAAvB;;IAOA,IAAIG,GAAG,CAACM,EAAR,EAAY;MACV,MAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;IACD;EACF,CAbD;;EAeA,oBACE;IAAA,wBACE;MACE,IAAI,EAAC,MADP;MAEE,IAAI,EAAC,MAFP;MAGE,KAAK,EAAE;QACL,SAAS,aADJ;QAEL,SAAS;MAFJ,CAHT;MAOE,QAAQ,EAAEnB;IAPZ;MAAA;MAAA;MAAA;IAAA,QADF,EASGJ,YAAY,IAAIF,YAAhB,gBACC;MAAA,gBAAIA,YAAY,CAACmB,IAAjB;IAAA,gBADD,gBAEG;MAAM,SAAS,EAAC,OAAhB;MAAA,gBAA0Bf,WAA1B;IAAA;MAAA;MAAA;MAAA;IAAA,QAXN;EAAA,gBADF;AAgBD"},"metadata":{},"sourceType":"module"}