[{"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/index.js":"1","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/reportWebVitals.js":"2","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/App.js":"3","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/LoggedOutView.js":"4","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Lists.js":"5","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Header.js":"6","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Signup.js":"7","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Login.js":"8","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/List.js":"9","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/DropDown.js":"10","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Tasks.js":"11","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Logout.js":"12","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/CreationForm.js":"13","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Task.js":"14","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/SelectedTask.js":"15","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/ImageModal.js":"16","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/ImagePicker.js":"17"},{"size":313,"mtime":1659486646314,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1659486646314,"results":"20","hashOfConfig":"19"},{"size":2747,"mtime":1659486646309,"results":"21","hashOfConfig":"19"},{"size":782,"mtime":1659486646310,"results":"22","hashOfConfig":"19"},{"size":1812,"mtime":1659486646312,"results":"23","hashOfConfig":"19"},{"size":604,"mtime":1659540032689,"results":"24","hashOfConfig":"19"},{"size":2951,"mtime":1659486646313,"results":"25","hashOfConfig":"19"},{"size":2201,"mtime":1659541971759,"results":"26","hashOfConfig":"19"},{"size":1066,"mtime":1659486646312,"results":"27","hashOfConfig":"19"},{"size":557,"mtime":1659486646311,"results":"28","hashOfConfig":"19"},{"size":2765,"mtime":1659486646313,"results":"29","hashOfConfig":"19"},{"size":530,"mtime":1659486646312,"results":"30","hashOfConfig":"19"},{"size":480,"mtime":1659486646310,"results":"31","hashOfConfig":"19"},{"size":2664,"mtime":1659486646313,"results":"32","hashOfConfig":"19"},{"size":4932,"mtime":1659486646313,"results":"33","hashOfConfig":"19"},{"size":1743,"mtime":1659524011421,"results":"34","hashOfConfig":"19"},{"size":1414,"mtime":1659486646311,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"17nbgql",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"39"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"39"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"39"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"39"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"39"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"39"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"39"},"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/index.js",[],[],[],"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/reportWebVitals.js",[],[],"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/App.js",["100"],[],"import { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Header from './components/Header';\nimport Lists from './components/Lists';\nimport LoggedOutView from './LoggedOutView';\nimport Signup from './components/Signup';\nimport Login from './components/Login';\nimport { useReducer, useState, createContext, useEffect } from 'react';\nimport './App.css'\n\n\nconst initialState = {\n  user: {\n    id: null\n  },\n  lists: [],\n  tasks: []\n};\nexport const UserContext = createContext({\n  user: {},\n  lists: [],\n  tasks: null,\n  value: null,\n  selectedTask: null\n});\n\nfunction userReducer(state, action) {\n  switch (action.type) {\n    case 'logout':\n      return initialState\n    case 'login':\n      return {\n        ...state,\n        user: { ...action.payload.user },\n        lists: action.payload.lists\n      };\n    case 'lists':\n      return {\n        user: { ...state.user },\n        lists: action.payload.lists,\n        tasks: action.payload.tasks ? action.payload.tasks : state.tasks\n      }\n    case 'tasks':\n      return {\n        ...state,\n        tasks: []\n      }\n    default:\n      throw new Error();\n  }\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(userReducer, initialState);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      const res = await fetch('/loaduser')\n      if (res.ok) {\n        const { user, tasklists } = await res.json();\n        dispatch({\n          type: 'login',\n          payload: {\n            user,\n            lists: tasklists\n          }\n        })\n      }\n    }\n    loadUser();\n    // eslint-disable-next-line\n  }, [state.user.id])\n\n  return (\n    <BrowserRouter>\n      <div >\n        {\n          !state.user.id &&\n          < Switch >\n            <Route path=\"/signup\">\n              <LoggedOutView componentToPassDown={\n                <Signup />\n              } />\n            </Route>\n            <Route path=\"*\">\n              <LoggedOutView componentToPassDown={\n                <Login dispatch={dispatch} />\n              } />\n            </Route>\n          </Switch>\n        }\n        {state.user.id &&\n\n          < UserContext.Provider value={{\n            user: state.user,\n            lists: state.lists,\n            dispatch\n          }} >\n            <Switch>\n              <Route path=\"/home\" exact={true}>\n                <div\n                  className=\"main\">\n                  <Header\n                    dispatch={dispatch}>\n                  </Header>\n                  <Lists />\n                </div>\n              </Route>\n              <Route path=\"*\">\n                <Redirect to=\"/home\" />\n              </Route>\n            </Switch>\n          </UserContext.Provider>\n        }\n      </div>\n    </BrowserRouter >\n  );\n}\n\nexport default App;\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/LoggedOutView.js",["101"],[],"import { Route } from \"react-router-dom\"\nimport Login from \"./components/Login\"\nimport './LoggedOutView.css'\n\nexport default function LoggedOutView({ dispatch, componentToPassDown }) {\n  return (\n    <Route\n      exact={true}\n      path=\"*\">\n      <div className=\"container__box\">\n        <div className=\"box__diagonal\">\n          <div className=\"box__content\">\n            <div className=\"box__filler\"></div>\n          </div>\n        </div>\n        <div className=\"box__diagonal\">\n          <div className=\"box__content\">\n            {componentToPassDown}\n          </div>\n        </div>\n        <div className=\"box__diagonal\">\n          <div className=\"box__content\">\n            <div className=\"box__filler\"></div>\n          </div>\n        </div>\n      </div>\n    </Route>\n  )\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Lists.js",["102","103"],[],"import { useState, useEffect, useContext } from 'react';\nimport './Lists.css';\nimport Tasks from './Tasks';\nimport DropDown from './DropDown';\nimport { UserContext } from '../App';\nimport List from './List';\n\nexport default function () {\n  const { lists, user, dispatch } = useContext(UserContext);\n  const initialListState = { id: null, title: 'Select a List' }\n  const [selectedList, setSelectedList] = useState(lists[0] ? lists[0] : initialListState)\n  const grabListInfo = (id, title) => {\n    setSelectedList({ id, title })\n  }\n  const createList = async (title) => {\n    const res = await fetch('/list', {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: user.id,\n        title\n      })\n    })\n    if (res.ok) {\n      const list = await res.json();\n      dispatch({\n        type: 'lists',\n        payload: {\n          lists: [...lists, list]\n        }\n      })\n    }\n  }\n\n  const resetListState = () => {\n    setSelectedList(initialListState);\n  }\n\n  useEffect(() => {\n    if (!lists.length) {\n      resetListState();\n    }\n  }, [lists]);\n\n  return (\n    <>\n      <div className=\"main__lists lists\">\n        <h3 className=\"lists__header\">\n          My Lists\n          <DropDown handleCreate={createList} buttonLabel=\"Add List\" />\n        </h3>\n        {lists.map((list) => (\n          <List\n            listid={list.id}\n            key={String(list.id) + String(list.updateDate)}\n            list={list}\n            grabListInfo={grabListInfo}\n            lists={lists}\n            dispatch={dispatch}\n            selectedListId={selectedList.id}\n            resetListState={resetListState}\n          />\n        ))}\n      </div>\n\n      {<Tasks taskListId={selectedList.id} taskListTitle={selectedList.title} ></Tasks>}\n    </>\n  )\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Header.js",["104","105"],[],"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Signup.js",["106","107","108","109"],[],"import { useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\n\nfunction Signup() {\n  const history = useHistory();\n  const [signupForm, setSignupForm] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  })\n  const [errors, setErrors] = useState({})\n\n  async function signMeUp(event) {\n    event.preventDefault();\n    validateInput();\n    if (errors.confirmPassword) {\n      return;\n    }\n\n    const XSRFTOKEN = await fetch('/get_csrf')\n    const token = (await XSRFTOKEN.json())\n    const res = await fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'X-CSRFToken': token.csrfT\n      },\n      body: JSON.stringify({\n        email: signupForm.email,\n        password: signupForm.password,\n        confirmPassword: signupForm.confirmPassword\n      })\n    })\n    if (res.status >= 200 && res.status < 400) {\n      const { token, user, tasklists } = await res.json();\n    } else {\n      console.log(res.status)\n    }\n\n    setSignupForm(({\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    }))\n    history.push('/login');\n  }\n\n  function handleChange(e) {\n    const { value, name } = e.target;\n    const fixDelayValue = value;\n    setSignupForm(prevNote => ({\n      ...prevNote, [name]: value\n    }))\n  }\n  const validateInput = () => {\n    const validationState = { ...errors };\n    if (!signupForm.email) {\n      validationState.email = \"Please enter email.\"\n    }\n    if (!signupForm.password) {\n      validationState.password = \"Please enter password.\"\n    }\n    if (signupForm.password !== signupForm.confirmPassword || !signupForm.confirmPassword) {\n      validationState.confirmPassword = \"Password and Confirm Password does not match.\";\n    } else {\n      validationState.confirmPassword = \"\";\n    }\n    setErrors(validationState);\n\n    return validationState;\n  };\n\n  return (\n    <>\n      <div className=\"form\">\n        <h1>Signup</h1>\n        <form >\n          <input onChange={handleChange}\n            type=\"email\"\n            text={signupForm.email}\n            name=\"email\"\n            placeholder=\"Email\"\n            value={signupForm.email} />\n          <input onChange={handleChange}\n            type=\"password\"\n            text={signupForm.password}\n            name=\"password\"\n            placeholder=\"Password\"\n            value={signupForm.password} />\n          <input onChange={handleChange}\n            type=\"password\"\n            text={signupForm.confirmPassword}\n            name=\"confirmPassword\"\n            placeholder=\"Confirm Password\"\n            value={signupForm.confirmPassword} />\n          <button onClick={signMeUp}>Submit</button>\n        </form>\n        <Link\n          to=\"/login\">\n          Login\n        </Link>\n      </div>\n      {/* {\n        Object.values(errors).map(msg =>\n          <p key={msg} className='error'>{msg}</p>\n        )\n      } */}\n    </>\n  );\n}\n\nexport default Signup;\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Login.js",[],[],"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/List.js",["110"],[],"import './Lists.css';\n\nexport default function List({\n  list,\n  grabListInfo,\n  lists,\n  dispatch,\n  selectedListId,\n  resetListState\n}) {\n\n  const deleteList = async () => {\n    const res = await fetch(`/list/${list.id}`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n    if (res.ok) {\n      dispatch({\n        type: 'lists',\n        payload: {\n          lists: lists.filter(displayedList => displayedList.id !== list.id)\n        }\n      });\n      if (selectedListId == list.id) {\n        resetListState();\n      }\n    };\n  }\n\n  const handleDotsClick = (e) => {\n    e.stopPropagation();\n    deleteList();\n  }\n\n\n  return (\n    <div\n      listid={list.id}\n      key={String(list.id) + String(list.updateDate)}\n      onClick={() => grabListInfo(list.id, list.title)}\n      className=\"lists__list\">\n      <div className='list__title'>\n        {list.title}\n      </div>\n      <div className='list__dot'\n        onClick={(e) => handleDotsClick(e)}\n      >\n        <div className='dot__dash'>-</div>\n      </div>\n    </div>\n  )\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/DropDown.js",["111"],[],"import { useState } from 'react';\nimport ListForm from './CreationForm';\nimport './DropDown.css';\n\nexport default function ({ handleCreate, buttonLabel }) {\n  const [showForm, setShowForm] = useState(false);\n\n  const pop = () => {\n    setShowForm(!showForm);\n  }\n\n  return (\n    <div className=\"lists__dropdown\">\n      <button onClick={pop} className=\"lists__button\">{buttonLabel}</button>\n      <div className=\"lists__dropdown-content\">\n        {showForm ? <ListForm create={handleCreate} setShowForm={setShowForm} /> : null}\n      </div>\n    </div>\n  )\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Tasks.js",["112","113"],[],"import './Tasks.css';\nimport Task from './Task';\nimport DropDown from './DropDown';\nimport React, { useEffect, useState } from 'react';\n\nexport default function ({ taskListId, taskListTitle }) {\n  const [tasksState, setTasksState] = useState([]);\n  const [showCompleted, setShowCompleted] = useState(true);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const sortByStatus = (tasks) => {\n    const tempNorm = [];\n    const tempStatus = [];\n    for (let i = 0; i < tasks.length; i++) {\n      let task = tasks[i];\n      if (task.status == 'Complete') {\n        tempStatus.push(task);\n      } else {\n        tempNorm.push(task);\n      }\n    }\n    return setTasksState([...tempNorm, ...tempStatus]);\n  }\n\n  const createTask = async (title) => {\n    const res = await fetch(`/task/${taskListId}`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        title\n      })\n    })\n    if (res.ok) {\n      const { task } = await res.json();\n      sortByStatus([...tasksState, task]);\n    } else {\n    }\n  }\n\n  const toggleCompleted = (e) => {\n    setShowCompleted(!showCompleted);\n  }\n\n  const updateCompletedClass = () => {\n\n  }\n\n  useEffect(() => {\n    if (!taskListId) {\n      setTasksState([]);\n      return;\n    }\n    async function fetchData() {\n      const res = await fetch(`/tasks/${taskListId}`, {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n      if (res.ok) {\n        const { tasks } = await res.json();\n        tasks ? sortByStatus([...tasks]) : sortByStatus([]);\n      }\n    }\n    fetchData();\n  }, [taskListId]);\n\n\n\n  return (\n    <div className=\"main__tasks tasks\"\n      onClick={() => sortByStatus(tasksState)}\n    >\n      <h3 className=\"tasks__header\">\n        <div className='tasks__list__title'>\n          {taskListTitle}\n        </div>\n        <label className='toggle__completed' htmlFor='showCompleted'>Hide Completed</label>\n        <input\n          type='checkbox'\n          name='showCompleted'\n          checked={!showCompleted}\n          value='Toggle Completed'\n          onClick={(e) => toggleCompleted(e)}\n          onChange={updateCompletedClass}\n        />\n        <DropDown handleCreate={createTask} buttonLabel=\"Add Task\" />\n      </h3>\n      {\n        tasksState.map((task, idx) => (\n          (showCompleted || task.status !== 'Complete') && <Task\n            task={task}\n            status={task.status}\n            key={String(task.id) + String(task.title) + String(task.updateDate)}\n            setTasksState={setTasksState}\n            tasksState={tasksState}\n            idx={idx}\n            selectedTask={selectedTask}\n            setSelectedTask={setSelectedTask}\n          />\n        ))\n      }\n    </div >\n  )\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Logout.js",[],[],"/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/CreationForm.js",["114"],[],"import { useState } from 'react';\nimport './ListForm.css'\n\nexport default function ({ create, setShowForm }) {\n  const [title, setTitle] = useState(\"\");\n\n  return (\n    <div className=\"dropdown-container\">\n      <input className=\"dropdown-input\" name=\"list-entry\" type=\"text\" onChange={(e) => setTitle(e.target.value)}></input>\n      <button className=\"dropdown-button\" onClick={() => {\n        create(title);\n        setShowForm(false);\n      }}>Create</button>\n    </div>\n  )\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/Task.js",["115","116","117"],[],"import { useState, useContext, useEffect } from 'react';\nimport './Task.css';\nimport SelectedTask from './SelectedTask';\nimport ImageModal from './ImageModal';\n\nexport default function ({\n  task,\n  setTasksState,\n  tasksState,\n  idx,\n  selectedTask,\n  setSelectedTask\n}) {\n  const [classNames, setClassNames] = useState(`tasks__task ${task.status === 'Complete' ? \" task__done\" : \"\"}`);\n  const [taskTitle, setTaskTitle] = useState(task.title);\n  const [isOpen, setOpen] = useState(false);\n  const [leftPropertySelectedTask, setLeftPropertySelectedTask] = useState(0);\n  const handleTitleClick = async () => {\n    if (selectedTask) return;\n    task.status = task.status === 'Open' ? 'Complete' : 'Open';\n    await fetch(`tasks/${task.id}/status`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: 1,\n        status: task.status,\n        taskListId: task.listId\n      })\n    })\n    setClassNames(`tasks__task ${task.status === 'Complete' ? \"task__done \" : \"\"}`);\n  }\n\n  const handleDotsClick = async (e) => {\n    e.stopPropagation();\n    const rect = e.target.getBoundingClientRect();\n    const width = window.innerWidth - 35;\n    const selectedTaskWidth = 364;\n    const listsMainWidth = 385;\n    const leftValueToSet = Math.min(width - (selectedTaskWidth) * 2, rect.left - listsMainWidth);\n    setLeftPropertySelectedTask(leftValueToSet);\n\n    if (selectedTask) {\n      setSelectedTask(null);\n    } else {\n      setSelectedTask(task);\n    }\n  }\n\n  const loadImageModal = (e) => {\n    e.stopPropagation();\n    setOpen(true);\n  }\n\n  return (\n    <div\n      className={classNames}\n      onClick={handleTitleClick}\n    >\n      {isOpen ? <ImageModal fileName={task.fileName} setOpen={setOpen} /> : <></>}\n      <div className='task__left'>\n        <div className='task__title'>{taskTitle}</div>\n        <div className='task__dots'\n          onClick={(e) => handleDotsClick(e)}\n        >\n          <div className='task__dot'></div>\n          <div className='task__dot'></div>\n          <div className='task__dot'></div>\n        </div>\n        {task.fileName ? <i onClick={(e) => loadImageModal(e)} className='fa task__file__icon'>&#xf15b;</i> : <></>}\n        {selectedTask ? <SelectedTask\n          leftPropertySelectedTask={leftPropertySelectedTask}\n          task={task}\n          idx={idx}\n          setTasksState={setTasksState}\n          tasksState={tasksState}\n          setTaskTitle={setTaskTitle}\n          selectedTask={selectedTask}\n          setSelectedTask={setSelectedTask}\n        /> : <div />}\n      </div>\n      <div className='task__right'>{task.dueWord}</div>\n    </div>\n  )\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/SelectedTask.js",["118","119","120","121","122"],[],"import './SelectedTask.css';\nimport { useState } from 'react';\nimport ImagePicker from './ImagePicker';\n\nexport default function ({\n  task,\n  selectedTask,\n  setSelectedTask,\n  setTasksState,\n  tasksState,\n  leftPropertySelectedTask\n}) {\n  const [title, setTitle] = useState(selectedTask.title || '');\n  const [tag, setTag] = useState(selectedTask.tag || '');\n  const [createDate, setCreateDate] = useState(selectedTask.createDate || '');\n  const [dueDate, setDueDate] = useState(selectedTask.dueDate || '');\n  const [remindDate, setRemindDate] = useState(selectedTask.remindDate || '');\n\n  const [selectedFile, setSelectedFile] = useState();\n\n  const handleTaskUpdate = async () => {\n    const res = await fetch(`/tasks/${selectedTask.id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        tag,\n        createDate,\n        dueDate,\n        remindDate,\n        title,\n        fileName: selectedFile ? selectedTask.id + \"-task-image\" : null\n      })\n    })\n    if (res.ok) {\n      const { updatedTask, preSignedPostS3 } = await res.json();\n      if (preSignedPostS3) {\n        await uploadToS3(preSignedPostS3.url, preSignedPostS3.fields);\n      }\n      const newTasks = tasksState.map(task => {\n        if (task.id === updatedTask.id) {\n          return Object.assign({}, updatedTask);\n        } else {\n          return task;\n        }\n      })\n      setTasksState([...newTasks]);\n      setSelectedTask(null);\n    }\n  }\n  const handleTaskDelete = async () => {\n    const res = await fetch(`/task/${selectedTask.id}`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n    if (res.ok) {\n      const { deletedTask } = await res.json();\n      const newTasks = tasksState.filter(el => {\n        if (el.id !== selectedTask.id) {\n          return el;\n        };\n      });\n      setTasksState([...newTasks]);\n      setSelectedTask(null);\n    };\n  }\n\n  const handleChange = (e, setCallback) => {\n    setCallback(e.target.value);\n  }\n\n  // TODO: to modify for uploadToS3 on error\n  const postFileName = async (fileName) => {\n    const res = await fetch(`/post_success/${selectedTask.id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        fileName: selectedTask.id + \"-task-image\"\n      })\n    })\n    if (res.ok) {\n      console.log(\"fileName added: \", fileName);\n    }\n  }\n\n  const uploadToS3 = async (url, fields) => {\n    const formData = new FormData();\n    for (const [key, val] of Object.entries(fields)) {\n      formData.append(key, val);\n    }\n    formData.append('file', selectedFile);\n    const res = await fetch(url, {\n      method: \"POST\",\n      body: formData\n    });\n    if (res.ok) {\n      // postFileName(fields.key);\n    } else {\n      // TODO: handle error by removing task's fileName in backend\n      // postFileName('')\n    }\n  }\n\n  const handleSubmission = async () => {\n    const res = await fetch('/sign_s3_post', {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        fileName: selectedTask.id + selectedFile.name,\n        fileType: selectedFile.type\n      })\n    });\n    if (res.ok) {\n      const { fields, url } = await res.json();\n      uploadToS3(url, fields);\n    }\n  }\n\n  return (\n    selectedTask && selectedTask.id === task.id ?\n      <div\n        className=\"task__selectedtask\"\n        style={{ left: leftPropertySelectedTask }}\n      >\n        <div className='selectedtask__container'>\n          <div className='selectedtask__line' >\n            Title: <input type=\"text\" value={title} onChange={(e) => handleChange(e, setTitle)} />\n          </div>\n          <div className='selectedtask__line' >\n            Tag: <input type=\"text\" value={tag} onChange={(e) => handleChange(e, setTag)} />\n          </div>\n          <div className='selectedtask__line'>\n            Created: <input type=\"date\" value={createDate} onChange={(e) => handleChange(e, setCreateDate)} />\n          </div>\n          <div className='selectedtask__line'>\n            Due: <input type=\"date\" value={dueDate} onChange={(e) => handleChange(e, setDueDate)} />\n          </div>\n\n          {/* // TODO: implement reminders\n          <div className='selectedtask__line'>\n            Remind: <input type=\"date\" value={remindDate} onChange={(e) => handleChange(e, setRemindDate)} />\n          </div> */}\n          <div className='selectedtask__line image__form'>\n            File: <ImagePicker\n              setSelectedFile={setSelectedFile}\n              selectedFile={selectedFile}\n              handleSubmission={handleSubmission}\n            />\n          </div>\n          <button className=\"lists__button\" onClick={handleTaskUpdate}>Update Task</button>\n          <button className=\"selectedtask__delete\" onClick={handleTaskDelete}>Delete Task</button>\n        </div>\n      </div>\n      :\n      <></>\n\n  )\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/ImageModal.js",["123","124","125"],[],"import { useState, useEffect } from 'react';\n\nexport default function ({\n  fileName,\n  setOpen\n}) {\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const handleShowDialog = (e) => {\n    e.stopPropagation();\n    setOpen(false)\n  };\n  useEffect(() => {\n    const getPresignedUrl = async () => {\n      const res = await fetch(`/sign_s3_get/${fileName}`);\n      if (res.ok) {\n        const data = await res.json();\n        setImgSrc(data.url);\n      };\n    }\n    getPresignedUrl();\n  }, [])\n  return (\n    <div style={{\n      display: 'flex',\n      bottom: 0,\n      right: 0,\n      backgroundColor: \"rgba(0,0,0,0.5)\",\n      justifyContent: 'center', alignItems: 'center',\n      position: 'fixed',\n      top: '-50%',\n      left: '-50%',\n      zIndex: '1000'\n    }}\n      onClick={handleShowDialog}\n    >\n      <div style={{\n        position: 'fixed',\n        top: '9%',\n        right: '9%',\n        fontSize: '60px',\n        color: 'red',\n        fontWeight: 'bold',\n        margin: 'auto'\n      }}\n      >\n        X\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          position: \"fixed\",\n          top: '50%',\n          // bottom: 0,\n          left: '50%',\n          // right: 0,\n          marginBlockStart: '9%',\n          // marginLeft: 0,\n          // marginRight: 0,\n          width: '20vw',\n          height: '20vh',\n          marginLeft: '-20vw',\n          marginTop: '-10vh',\n          backgroundColor: \"rgba(0,0,0,0.5)\",\n          justifyItems: 'center',\n          alignItems: 'center'\n        }}>\n        <img\n          src={imgSrc}\n          style={{\n            flex: 1,\n            maxWidth: '75vh',\n            maxHeight: '75vh',\n          }}\n          alt=\"no image\"\n        />\n      </div>\n    </div >\n  );\n}\n","/Users/jpa/Desktop/coding-aa/react-flask-app/client/src/components/ImagePicker.js",["126","127","128"],[],"import { useState } from 'react';\nimport './ListForm.css';\nimport './ImageView.css';\n\nexport default function ({ task, setSelectedFile, selectedFile, handleSubmission }) {\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  const [uploadError, setUploadError] = useState('');\n\n  const changeHandler = (e) => {\n    setIsFilePicked(true);\n    const file = e.target.files[0];\n    if (file.size > 1000000) {\n      setUploadError(\"No files > 1mb\");\n    } else if (file.type !== 'image/png' && file.type !== 'image/jpeg') {\n      setUploadError(\"PNG or JPEG only\");\n    } else {\n      setSelectedFile(file);\n    }\n  };\n\n  // NOT IN USE: use if want to upload via backend instead of presigned post url\n  const handlePut = async (e) => {\n    const formData = new FormData();\n    formData.append('file', selectedFile)\n    const res = await fetch(`/put_s3/${selectedFile.name}`, {\n      method: \"POST\",\n      headers: {\n        'Enctype': 'multipart/form-data'\n      },\n      body: formData\n    });\n    if (res.ok) {\n      const data = await res.json();\n    }\n  }\n\n  return (\n    < >\n      <input\n        type=\"file\"\n        name=\"file\"\n        style={{\n          'color': 'transparent',\n          'width': '90px'\n        }}\n        onChange={changeHandler} />\n      {isFilePicked && selectedFile ? (\n        <> {selectedFile.name} </>\n      ) : <span className='error'> {uploadError} </span>\n      }\n    </>\n  )\n}\n",{"ruleId":"129","severity":1,"message":"130","line":7,"column":22,"nodeType":"131","messageId":"132","endLine":7,"endColumn":30},{"ruleId":"129","severity":1,"message":"133","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":13},{"ruleId":"134","severity":1,"message":"135","line":8,"column":1,"nodeType":"136","endLine":69,"endColumn":2},{"ruleId":"137","severity":1,"message":"138","line":43,"column":6,"nodeType":"139","endLine":43,"endColumn":13,"suggestions":"140"},{"ruleId":"134","severity":1,"message":"135","line":6,"column":1,"nodeType":"136","endLine":24,"endColumn":2},{"ruleId":"141","severity":1,"message":"142","line":17,"column":9,"nodeType":"143","endLine":17,"endColumn":70},{"ruleId":"129","severity":1,"message":"144","line":35,"column":15,"nodeType":"131","messageId":"132","endLine":35,"endColumn":20},{"ruleId":"129","severity":1,"message":"145","line":35,"column":22,"nodeType":"131","messageId":"132","endLine":35,"endColumn":26},{"ruleId":"129","severity":1,"message":"146","line":35,"column":28,"nodeType":"131","messageId":"132","endLine":35,"endColumn":37},{"ruleId":"129","severity":1,"message":"147","line":50,"column":11,"nodeType":"131","messageId":"132","endLine":50,"endColumn":24},{"ruleId":"148","severity":1,"message":"149","line":24,"column":26,"nodeType":"150","messageId":"151","endLine":24,"endColumn":28},{"ruleId":"134","severity":1,"message":"135","line":5,"column":1,"nodeType":"136","endLine":20,"endColumn":2},{"ruleId":"134","severity":1,"message":"135","line":6,"column":1,"nodeType":"136","endLine":102,"endColumn":2},{"ruleId":"148","severity":1,"message":"149","line":15,"column":23,"nodeType":"150","messageId":"151","endLine":15,"endColumn":25},{"ruleId":"134","severity":1,"message":"135","line":4,"column":1,"nodeType":"136","endLine":16,"endColumn":2},{"ruleId":"129","severity":1,"message":"152","line":1,"column":20,"nodeType":"131","messageId":"132","endLine":1,"endColumn":30},{"ruleId":"129","severity":1,"message":"153","line":1,"column":32,"nodeType":"131","messageId":"132","endLine":1,"endColumn":41},{"ruleId":"134","severity":1,"message":"135","line":6,"column":1,"nodeType":"136","endLine":84,"endColumn":2},{"ruleId":"134","severity":1,"message":"135","line":5,"column":1,"nodeType":"136","endLine":157,"endColumn":2},{"ruleId":"129","severity":1,"message":"154","line":17,"column":22,"nodeType":"131","messageId":"132","endLine":17,"endColumn":35},{"ruleId":"129","severity":1,"message":"155","line":56,"column":15,"nodeType":"131","messageId":"132","endLine":56,"endColumn":26},{"ruleId":"156","severity":1,"message":"157","line":57,"column":45,"nodeType":"158","messageId":"159","endLine":57,"endColumn":47},{"ruleId":"129","severity":1,"message":"160","line":72,"column":9,"nodeType":"131","messageId":"132","endLine":72,"endColumn":21},{"ruleId":"134","severity":1,"message":"135","line":3,"column":1,"nodeType":"136","endLine":79,"endColumn":2},{"ruleId":"137","severity":1,"message":"161","line":21,"column":6,"nodeType":"139","endLine":21,"endColumn":8,"suggestions":"162"},{"ruleId":"163","severity":1,"message":"164","line":67,"column":9,"nodeType":"143","endLine":75,"endColumn":11},{"ruleId":"134","severity":1,"message":"135","line":5,"column":1,"nodeType":"136","endLine":53,"endColumn":2},{"ruleId":"129","severity":1,"message":"165","line":22,"column":9,"nodeType":"131","messageId":"132","endLine":22,"endColumn":18},{"ruleId":"129","severity":1,"message":"166","line":33,"column":13,"nodeType":"131","messageId":"132","endLine":33,"endColumn":17},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Login' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetListState'. Either include it or remove the dependency array.","ArrayExpression",["167"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'token' is assigned a value but never used.","'user' is assigned a value but never used.","'tasklists' is assigned a value but never used.","'fixDelayValue' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useContext' is defined but never used.","'useEffect' is defined but never used.","'setRemindDate' is assigned a value but never used.","'deletedTask' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'postFileName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fileName'. Either include it or remove the dependency array.",["168"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'handlePut' is assigned a value but never used.","'data' is assigned a value but never used.",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [lists, resetListState]",{"range":"173","text":"174"},"Update the dependencies array to be: [fileName]",{"range":"175","text":"176"},[1108,1115],"[lists, resetListState]",[481,483],"[fileName]"]