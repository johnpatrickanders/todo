[{"/Users/jpa/Desktop/react-flask-app/src/index.js":"1","/Users/jpa/Desktop/react-flask-app/src/App.js":"2","/Users/jpa/Desktop/react-flask-app/src/reportWebVitals.js":"3","/Users/jpa/Desktop/react-flask-app/src/components/Main.js":"4"},{"size":500,"mtime":1609777368418,"results":"5","hashOfConfig":"6"},{"size":1030,"mtime":1610654839264,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1609777368419,"results":"8","hashOfConfig":"6"},{"size":320,"mtime":1610659601230,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"18jxdz3",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jpa/Desktop/react-flask-app/src/index.js",[],["19","20"],"/Users/jpa/Desktop/react-flask-app/src/App.js",["21","22"],"/Users/jpa/Desktop/react-flask-app/src/reportWebVitals.js",[],"/Users/jpa/Desktop/react-flask-app/src/components/Main.js",["23"],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":12,"column":10,"nodeType":"30","messageId":"31","endLine":12,"endColumn":21},{"ruleId":"32","severity":1,"message":"33","line":14,"column":13,"nodeType":"34","endLine":18,"endColumn":4},{"ruleId":"35","severity":1,"message":"36","line":5,"column":1,"nodeType":"37","endLine":14,"endColumn":2},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'currentTime' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]